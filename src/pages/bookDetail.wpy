<style lang='scss' scoped>
.detail-container {
  min-height: 100%;
  background-color: #f4f4f4;
  padding-bottom: 44px;
}

.short-comments {
  background-color: #fff;
  padding: 10px 15px;
  .title {
    display: block;
    margin-bottom: 10px;
    text-align: center;
    font-size: 15px;
    line-height: 20px;
    color: #000000;
  }
}

.element {
  margin-bottom: 10px;
}

.comment-input {
  position: fixed;
  width: 100%;
  bottom: 0;
  left: 0;
}
</style>

<template>
  <view class='detail-container'>
    <Comment></Comment>
    <Poster class="element"
            :imgUrl.sync="imgUrl"
            :bookName.sync="bookName"
            :author.sync="author"></Poster>
    <view class="short-comments element">
      <text class="title">短评</text>
      <CommentsWrapper :comments.sync="comments"></CommentsWrapper>
    </view>
    <Summary class="element"
             :content.sync="summary"></Summary>
    <BookInfo :publisher.sync="publisher"
              :pubdate.sync="pubdate"
              :pages.sync="pages"
              :price.sync="price"
              :binding.sync="binding"></BookInfo>
    <CommentInput class="comment-input"
                  @sendComment.user="addShortComment"
                  :comments.sync="comments"
                  :likeCount.sync="likeCount"
                  :likeStatus.sync="likeStatus"></CommentInput>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import Poster from '../components/bookDetail/poster'
  import Summary from '../components/bookDetail/summary'
  import BookInfo from '../components/bookDetail/bookInfo'
  import BookModel from '../models/book'
  import CommentsWrapper from '../components/common/commentsWrapper'
  import CommentInput from '../components/common/commentInput'

  const bookModel = new BookModel()

  export default class Index extends wepy.page {
    components = {
      CommentsWrapper,
      Poster,
      Summary,
      BookInfo,
      CommentInput
    }

    data = {
      bookDetail: {},
      comments: [],
      likeCount: 0,
      likeStatus: 0,
      bookID: 0
    }

    computed = {
      imgUrl() {
        return this.bookDetail.image
      },

      bookName() {
        return this.bookDetail.title
      },

      author() {
        return this.bookDetail.author
      },

      summary() {
        return this.bookDetail.summary
      },

      publisher() {
        return this.bookDetail.publisher
      },

      pubdate() {
        return this.bookDetail.pubdate
      },

      pages() {
        return this.bookDetail.pages
      },

      price() {
        return this.bookDetail.price
      },

      binding() {
        return this.bookDetail.binding
      }
    }

    onLoad(options) {
      this.bookID = options.id
      this.getBookDetail(this.bookID)
      this.getBookFavor(this.bookID)
    }

    methods = {
      async addShortComment(content) {
        console.log(content)
        if (content.length > 12) {
          wepy.showToast({
            title: '短评字数超出限制,最多12个字', // 提示的内容,
            icon: 'none', // 图标,
            duration: 2000 // 延迟时间,
          })
          return
        }
        const data = await bookModel.addShortComment(this.bookID, content)
        if (data || data.msg === 'ok' || data.error_code === 0) {
          wepy.showToast({
            title: '+1', // 提示的内容,
            icon: 'none', // 图标,
            duration: 2000 // 延迟时间,
          })
        } else {
          wepy.showToast({
            title: '发送失败', // 提示的内容,
            icon: 'none', // 图标,
            duration: 2000 // 延迟时间,
          })
        }
      }
    }

    async getBookDetail(id) {
      this.bookDetail = await bookModel.getBookDetail(id)
      const data = await bookModel.getShortComment(id)
      this.comments = data.comments
      this.$apply()
    }

    async getBookFavor(id) {
      const data = await bookModel.getBookFavor(id)
      if (!data) return
      this.likeCount = data.fav_nums
      this.likeStatus = data.like_status
      this.$apply()
    }
  }
</script>
